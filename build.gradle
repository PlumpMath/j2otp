apply plugin: 'java'

sourceCompatibility = 1.6
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.apache.logging.log4j:log4j-api:2.1'
    testCompile 'org.apache.logging.log4j:log4j-core:2.1'

    compile 'gnu.getopt:java-getopt:1.0.13'
    compile 'org.erlang.otp:jinterface:1.5.6'
    compile 'org.apache.commons:commons-pool2:2.2'
    compile 'org.apache.logging.log4j:log4j-api:2.1'
    compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'com.google.code.gson:gson:2.3.1'
}

jar {
    manifest {
        attributes(
                'Create-By': create_by(),
                'Build-By': "$System.env.USER@" + hostname(),
                'Build-Version': jar_version(),
                'Build-Date': new Date()
        )
    }
}

task uberjar(type: Jar, dependsOn:jar/*, dependsOn:[':compileJava',':compileGroovy']*/) {
    from files(sourceSets.main.output.classesDir)
    // just copy log4j2.xml to classpath,
    // or u can specify it with -D log4j.configurationFile=<log4j2.xml-path>
    from 'src/main/resources'
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"

    manifest {
        attributes(
                'Create-By': System.getProperty('java.version'),
                'Main-Class': 'org.tao.j2otp.Core',
                'Build-Version': jar_version(),
                'Build-Date': new Date()
        )
    }
}

String create_by() {
    String.format('%s %s',
            System.getProperty('java.version'),
            System.getProperty('java.vm.vendor')
    )
}

String hostname() {
    InetAddress.getLocalHost().getHostName()
}

String vcs_version() {
    'git describe --tags --always HEAD'.execute().text.trim()
}

String jar_version() {
    String.format('%s-%s', version, vcs_version())
}